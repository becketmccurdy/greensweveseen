// prisma/schema.prisma
// Aligns Prisma models with existing Supabase tables used by the app

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model UserProfile {
  userId     String   @id // Supabase auth user ID and existing PK in DB
  email      String   @unique
  firstName  String?
  lastName   String?
  bio        String?
  location   String?
  handicap   Float?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  rounds     Round[]
  scores     Score[]
  activities FriendActivity[]
  invites    FriendInvite[]   @relation("InvitesByUser")
  friendshipsAsUser  Friendship[] @relation("UserFriendships")
  friendshipsAsFriend Friendship[] @relation("FriendFriendships")
  roundFriends RoundFriend[]

  @@map("user_profiles")
}

model Course {
  id           String   @id @default(cuid())
  name         String
  location     String?
  par          Int
  holes        Int?
  rating       Float?
  slope        Int?
  description  String?
  latitude     Float?
  longitude    Float?
  address      String?
  externalId   String?
  externalSource String?
  createdById  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  rounds Round[]

  @@map("courses")
}

model Round {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  date        DateTime @default(now())
  totalScore  Int
  totalPar    Int      @default(72)
  weather     String?
  notes       String?
  withFriends Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user        UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  scores      Score[]
  friends     RoundFriend[]

  @@index([userId, date(sort: Desc)])
  @@map("rounds")
}

model Score {
  id       String  @id @default(cuid())
  roundId  String
  userId   String
  hole     Int
  strokes  Int
  par      Int
  putts    Int?
  fairway  Boolean?
  gir      Boolean?
  notes    String?

  // Relations
  round Round @relation(fields: [roundId], references: [id], onDelete: Cascade)
  user  UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([roundId, hole], name: "scores_roundId_hole_key")
  @@index([roundId])
  @@index([userId])
  @@map("scores")
}

model Friendship {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   UserProfile @relation("UserFriendships", fields: [userId], references: [userId], onDelete: Cascade)
  friend UserProfile @relation("FriendFriendships", fields: [friendId], references: [userId], onDelete: Cascade)

  @@unique([userId, friendId])
  @@index([userId])
  @@index([friendId])
  @@map("friendships")
}

model FriendActivity {
  id        String   @id @default(cuid())
  userId    String
  type      String
  data      Json
  createdAt DateTime @default(now())

  // Relations
  user UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId, createdAt(sort: Desc)])
  @@map("friend_activities")
}

model FriendInvite {
  id         String   @id @default(cuid())
  inviterId  String
  email      String?
  phone      String?
  token      String   @unique
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  acceptedAt DateTime?

  // Relations
  inviter UserProfile @relation("InvitesByUser", fields: [inviterId], references: [userId], onDelete: Cascade)

  @@map("friend_invites")
}

model RoundFriend {
  id           String   @id @default(cuid())
  roundId      String
  friendUserId String
  createdAt    DateTime @default(now())

  // Relations
  round Round @relation(fields: [roundId], references: [id], onDelete: Cascade)
  friend UserProfile @relation(fields: [friendUserId], references: [userId], onDelete: Cascade)

  @@unique([roundId, friendUserId])
  @@map("round_friends")
}
